/*
  Simple example that takes a command line provided serial port destination and routes the output to a file of the same name with .log appended to the port name.
  
  usage: node logger.js /dev/tty.usbserial <baudrate>
  
*/

var SerialPort = require("serialport");
var fs = require("fs");
var port = process.argv[2];
var baudrate = process.argv[3];

//var port = "COM4"; //process.argv[2];
//var baudrate = 9600; //process.argv[3];
var active = false;

function attemptLogging(fd, port, baudrate) {
  if (!active) {
    fs.stat(port,  function (err, stats) {
      if (!err) {
        active = true;
        
        var serialPort = new SerialPort.SerialPort(port, {
          baudrate: baudrate
        });
        fs.write(fd, "\n------------------------------------------------------------\nOpening SerialPort: "+target+" at "+Date.now()+"\n------------------------------------------------------------\n");  
        serialPort.on("data", function (data) {
          fs.write(fd, data.toString());
        });
        serialPort.on("close", function (data) {
          active = false;
          fs.write(fd, "\n------------------------------------------------------------\nClosing SerialPort: "+target+" at "+Date.now()+"\n------------------------------------------------------------\n");  
        });
      }
    });
  }
}

if (!port) {
  console.log("You must specify a serial port location.");
} else {
  var target = port.split("/");
  target = target[target.length-1]+".log";
  if (!baudrate) {
    baudrate = 115200;
  }
  fs.open("./"+target, 'w', function (err, fd) {
    setInterval(function () {
      if (!active) {
        try {
          attemptLogging(fd, port, baudrate);  
        } catch (e) {
          // Error means port is not available for listening.
          active = false;
        }
      }
    }, 1000);
  });
}




var light1 = true;
var light2 = true;

SerialPort = require('serialport').SerialPort;

port = "COM4";

server = http.createServer(function(req, res) {

return fs.readFile("" + __dirname + "/mobil2an.html", function(err, data) {

res.writeHead(200, {
'Content-Type': 'text/html'
});

return res.end(data, 'utf8′);
});
});
server.listen(1338);
io = require('socket.io').listen(server);

//var sp = new SerialPort (port, {baudrate: 9600});
//serial listener
serial = new SerialPort (port, {baudrate: 9600});
serial.on('data', function(chunk){
readData  =chunk.toString();
if(readData.indexOf('\n')){
//cleanData = readData;
//readData = ";
io.sockets.emit('publish',"Robot: "+ readData);
} });

io.sockets.on('connection', function(socket) {
//console.log(socket);
socket.emit("publish", "Connected.");

socket.on('broadcast', function(message) {
var message = new Buffer(message);
return serial.write(message);

});

socket.on('data', function(data){
console.log("The message data: " + data);
socket.emit("publish",data);
});

socket.on('getfile', function(data){
console.log("The message data " + data);
socket.emit("data",data);
});

socket.on('forward', function(message2) {
socket.emit("publish",message2)
var message = new Buffer("w");

return serial.write(message);;

});

socket.on('reverse', function(message) {

socket.emit("publish",message);
var message = new Buffer("x");
return serial.write(message);

if(debug)
console.log("Time: " + new Date());

});

socket.on('sing', function(message) {

socket.emit("publish",message);

var message = new Buffer("y");
return serial.write(message);

if(debug)
console.log("Time: " + new Date());

});
socket.on('lcd', function(message) {

socket.emit("publish",message);
var message = new Buffer("l");
return serial.write(message);

});

socket.on('left', function(message) {
socket.emit("publish",message);
var message = new Buffer("a");
return serial.write(message);
;

});
socket.on('right', function(message) {
socket.emit("publish",message);
var message = new Buffer("d");
return serial.write(message);
;

});
socket.on('stop', function(message) {
socket.emit("publish",message);
var message = new Buffer("s");
return serial.write(message);

});
socket.on('1′, function(message) {
socket.emit("publish","Camera " + message);
var message = new Buffer(message);
return serial.write(message);

});
socket.on('2′, function(message) {
socket.emit("publish","Camera " + message);
var message = new Buffer(message);
return serial.write(message);

});
socket.on('3′, function(message2) {
socket.emit("publish","Camera " + message2);
var message = new Buffer(message2);
return serial.write(message);

});
socket.on('fl', function(message) {
socket.emit("publish",message);
var message = new Buffer("q");
return serial.write(message);

});

socket.on('fr', function(message) {
socket.emit("publish",message);
var message = new Buffer("e");
return serial.write(message);

});

socket.on('reverse', function(message) {
socket.emit("publish",message);
var message = new Buffer("x");
return serial.write(message);
});

socket.on('rl', function(message) {
socket.emit("publish",message);
var message = new Buffer("z");
return serial.write(message);

});

socket.on('rr', function(message) {
socket.emit("publish",message);
var message = new Buffer("c");
return serial.write(message);

});

socket.on('light1′, function(message) {
socket.emit("publish",message);
var message = new Buffer("i");
if(light1){
message = new Buffer("i");
light1 = false;
return serial.write(message);

}else{
message = new Buffer("p");
light1 = true;
return serial.write(message);

}
if (debug)
console.log("Time: " + new Date());
});
socket.on('light2′, function(message) {
socket.emit("publish",message);
var message = new Buffer("u");
if(light2){
message = new Buffer("u");
light2 = false;
return serial.write(message);

}else{
message = new Buffer("o");
light2 = true;
return serial.write(message);

}
if (debug)
console.log("Time: " + new Date());
});
socket.on('whisper', function(message) {
return socket.broadcast.emit('secret', message);
});
});



